using Base.Iterators: product
using QuantumLattices: ‚äï, ‚äó, ‚ä†, decompose, dimension, rank
using QuantumLattices.QuantumNumbers

@testset "AbelianQuantumNumber" begin
    n = ‚Ñï(1)
    @test values(n) == 1
    @test n==‚Ñï(1) && isequal(n, ‚Ñï(1))
    @test n<‚Ñï(2) && isless(n, ‚Ñï(2))
    @test periods(n) == periods(typeof(n)) == (Inf,)
    @test period(n) == period(typeof(n)) == Inf
    @test zero(n) == zero(typeof(n)) == ‚Ñï(0)
    @test n‚äó‚Ñï(2) == ‚Ñï(3)
    @test +n==n && n+‚Ñï(2) == ‚Ñï(3)
    @test -n==‚Ñï(-1) && n-‚Ñï(2)==‚Ñï(-1)
    @test inv(n)==inv(n, true)==-n && inv(n, false)==n
    @test hash(n, UInt(10)) == hash(1, UInt(10))
    @test string(n) == "‚Ñï(1)"
    @test iterate(n) == (n, nothing)
    @test isnothing(iterate(n, nothing))

    sz = ùïä·∂ª(1/2)
    sp = n ‚ä† sz
    @test values(sp) == (1, 1/2)
    @test sp == Abelian[‚Ñï ‚ä† ùïä·∂ª](1, 1/2) == Abelian[‚Ñï ‚ä† ùïä·∂ª]((1, 1/2)) == CompositeAbelianQuantumNumber(n, sz)
    @test hash(sp, UInt(1)) == hash((n.charge, sz.charge), UInt(1))
    @test string(sp) == "Abelian[‚Ñï ‚ä† ùïä·∂ª](1, 1/2)"
    @test zero(sp) == zero(typeof(sp)) == Abelian[‚Ñï ‚ä† ùïä·∂ª](0, 0)
    @test length(sp) == rank(sp) == rank(typeof(sp)) == 2
    @test sp[1]==sp[begin]==n && sp[2]==sp[end]==sz
    @test periods(sp) == periods(typeof(sp)) == (Inf, Inf)
    @test period(sp, 1) == period(sp, 2) == Inf
    @test +sp==sp && sp+Abelian[‚Ñï ‚ä† ùïä·∂ª](1, 1/2)==Abelian[‚Ñï ‚ä† ùïä·∂ª](2, 1)
    @test -sp==Abelian[‚Ñï ‚ä† ùïä·∂ª](-1, -1/2) && Abelian[‚Ñï ‚ä† ùïä·∂ª](2, 1)-Abelian[‚Ñï ‚ä† ùïä·∂ª](1, 1/2)==sp

    @test (‚Ñï(1) ‚ä† ùïä·∂ª(1/2)) ‚ä† (‚Ñï(2) ‚ä† ùïä·∂ª(3/2)) == (‚Ñï(1) ‚ä† ùïä·∂ª(1/2) ‚ä† ‚Ñï(2)) ‚ä† ùïä·∂ª(3/2) == ‚Ñï(1) ‚ä† (ùïä·∂ª(1/2) ‚ä† ‚Ñï(2) ‚ä† ùïä·∂ª(3/2))
    @test (‚Ñï ‚ä† ùïä·∂ª) ‚ä† (‚Ñï ‚ä† ùïä·∂ª) == (‚Ñï ‚ä† ùïä·∂ª ‚ä† ‚Ñï) ‚ä† ùïä·∂ª == ‚Ñï ‚ä† (ùïä·∂ª ‚ä† ‚Ñï ‚ä† ùïä·∂ª)

    @test ‚Ñ§‚ÇÑ(-4)==‚Ñ§‚ÇÑ(0)==‚Ñ§‚ÇÑ(4) && ‚Ñ§‚ÇÑ(-3)==‚Ñ§‚ÇÑ(1)==‚Ñ§‚ÇÑ(5) && ‚Ñ§‚ÇÑ(-2)==‚Ñ§‚ÇÑ(2)==‚Ñ§‚ÇÑ(6) && ‚Ñ§‚ÇÑ(-1)==‚Ñ§‚ÇÑ(3)==‚Ñ§‚ÇÑ(7)
    @test string(‚Ñ§‚ÇÇ(0)) == "‚Ñ§‚ÇÇ(0)" && string(‚Ñ§‚ÇÉ(0)) == "‚Ñ§‚ÇÉ(0)" && string(‚Ñ§‚ÇÑ(0)) == "‚Ñ§‚ÇÑ(0)" && string(‚Ñ§{5}(0)) == "‚Ñ§{5}(0)"

    @test Momentum‚ÇÅ{10} |> periods == (10,)
    @test Momentum‚ÇÇ{10, 15} |> periods == (10, 15)
    @test Momentum‚ÇÉ{10, 15, 20} |> periods == (10, 15, 20)

    @test Momentum‚ÇÅ{10}(1) == Momentum‚ÇÅ{10}(11) == Momentum‚ÇÅ{10}(-9)
    @test Momentum‚ÇÇ{10}(1, 1) == Momentum‚ÇÇ{10}(11, 11) == Momentum‚ÇÇ{10}(-9, -9)
    @test Momentum‚ÇÉ{10}(1, 1, 1) == Momentum‚ÇÉ{10}(11, 11, 11) == Momentum‚ÇÉ{10}(-9, -9, -9)
    @test Momentum‚ÇÇ{10, 20}(1, 1) == Momentum‚ÇÇ{10, 20}(11, 21) == Momentum‚ÇÇ{10, 20}(-9, -19)
    @test Momentum‚ÇÉ{10, 20, 30}(1, 1, 1) == Momentum‚ÇÉ{10, 20, 30}(11, 21, 31) == Momentum‚ÇÉ{10, 20, 30}(-9, -19, -29)

    @test string(Momentum‚ÇÅ{10}) == "Momentum‚ÇÅ{10}"
    @test string(Momentum‚ÇÇ{10, 15}) == "Momentum‚ÇÇ{10, 15}"
    @test string(Momentum‚ÇÉ{10, 15, 20}) == "Momentum‚ÇÉ{10, 15, 20}"
    @test string(Momentum‚ÇÅ{10}(2)) == "Momentum‚ÇÅ{10}(2)"
    @test string(Momentum‚ÇÇ{10, 20}(2, 3)) == "Momentum‚ÇÇ{10, 20}(2, 3)"
    @test string(Momentum‚ÇÉ{10, 20, 30}(2, 3, 4)) == "Momentum‚ÇÉ{10, 20, 30}(2, 3, 4)"

    @test Int(Momentum‚ÇÅ{10}(2)) == 3
    @test Int(Momentum‚ÇÇ{10, 20}(2, 3)) == 44
    @test Int(Momentum‚ÇÉ{10, 20, 30}(2, 3, 4)) == 1295
end

@testset "Momenta" begin
    momenta = Momenta(Momentum‚ÇÇ{2, 3})
    @test momenta == Momenta(Momentum‚ÇÇ{2, 3})
    @test momenta ‚â† Momenta(Momentum‚ÇÇ{2, 4})
    @test isequal(momenta, Momenta(Momentum‚ÇÇ{2, 3}))
    @test !isequal(momenta, Momenta(Momentum‚ÇÇ{2, 4}))
    @test collect(momenta) == [Momentum‚ÇÇ{2, 3}(0, 0), Momentum‚ÇÇ{2, 3}(0, 1), Momentum‚ÇÇ{2, 3}(0, 2), Momentum‚ÇÇ{2, 3}(1, 0), Momentum‚ÇÇ{2, 3}(1, 1), Momentum‚ÇÇ{2, 3}(1, 2)]
    for momentum in momenta
        @test momenta[convert(CartesianIndex, momentum, momenta)] == momentum
    end 
end

@testset "regularize" begin
    quantumnumbers, dimensions, perm = regularize([‚Ñï(4), ‚Ñï(2), ‚Ñï(3), ‚Ñï(1), ‚Ñï(2)], [2, 3, 1, 4, 9])
    @test quantumnumbers == [‚Ñï(1), ‚Ñï(2), ‚Ñï(3), ‚Ñï(4)]
    @test dimensions == [4, 12, 1, 2]
    @test perm == [4, 2, 5, 3, 1]
end

@testset "AbelianGradedSpace" begin
    qns = AbelianGradedSpace([‚Ñï(1), ‚Ñï(2), ‚Ñï(3), ‚Ñï(4)], [4, 12, 1, 2]; ordercheck=true, duplicatecheck=true, degeneracycheck=true)
    @test string(qns) == "Graded{‚Ñï}(1=>4, 2=>12, 3=>1, 4=>2)"
    @test qns==Graded{‚Ñï}(1=>4, 2=>12, 3=>1, 4=>2)==Graded{‚Ñï}((1=>4, 2=>12, 3=>1, 4=>2))==Graded(‚Ñï(1)=>4, ‚Ñï(2)=>12, ‚Ñï(3)=>1, ‚Ñï(4)=>2)==Graded((‚Ñï(1)=>4, ‚Ñï(2)=>12, ‚Ñï(3)=>1, ‚Ñï(4)=>2))
    @test length(qns) == 4
    @test qns[1]==‚Ñï(1) && qns[2]==‚Ñï(2) && qns[3]==‚Ñï(3) && qns[4]==‚Ñï(4)
    @test qns[2:-1:1] == qns[[‚Ñï(2), ‚Ñï(1)]] == Graded{‚Ñï}(1=>4, 2=>12)
    @test ‚Ñï(1)‚ààqns && ‚Ñï(2)‚ààqns && ‚Ñï(3)‚ààqns && ‚Ñï(4)‚ààqns && ‚Ñï(5)‚àâqns
    @test dimension(qns)==19 && dimension(qns, 1)==dimension(qns, ‚Ñï(1))==4 && dimension(qns, 2)==dimension(qns, ‚Ñï(2))==12 && dimension(qns, 3)==dimension(qns, ‚Ñï(3))==1 && dimension(qns, 4)==dimension(qns, ‚Ñï(4))==2
    @test range(qns, 1)==range(qns, ‚Ñï(1))==1:4 && range(qns, 2)==range(qns, ‚Ñï(2))==5:16 && range(qns, 3)==range(qns, ‚Ñï(3))==17:17 && range(qns, 4)==range(qns, ‚Ñï(4))==18:19
    @test cumsum(qns, 0)==0 && cumsum(qns, 1)==cumsum(qns, ‚Ñï(1))==4 && cumsum(qns, 2)==cumsum(qns, ‚Ñï(2))==16 && cumsum(qns, 3)==cumsum(qns, ‚Ñï(3))==17 && cumsum(qns, 4)==cumsum(qns, ‚Ñï(4))==19
    @test collect(pairs(qns, dimension))==[‚Ñï(1)=>4, ‚Ñï(2)=>12, ‚Ñï(3)=>1, ‚Ñï(4)=>2] && collect(pairs(qns, range))==[‚Ñï(1)=>1:4, ‚Ñï(2)=>5:16, ‚Ñï(3)=>17:17, ‚Ñï(4)=>18:19]
    @test [findindex(i, qns, guess) for (i, guess) in zip(1:dimension(qns), [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4])] == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4]

    qns = qns'
    @test string(qns)=="Graded{‚Ñï}(1=>4, 2=>12, 3=>1, 4=>2)'"
    @test qns[1]==‚Ñï(-1) && qns[2]==‚Ñï(-2) && qns[3]==‚Ñï(-3) && qns[4]==‚Ñï(-4)
    @test qns[2:-1:1] == qns[[‚Ñï(-2), ‚Ñï(-1)]] == Graded{‚Ñï}(1=>4, 2=>12; dual=true)
    @test ‚Ñï(-1)‚ààqns && ‚Ñï(-2)‚ààqns && ‚Ñï(-3)‚ààqns && ‚Ñï(-4)‚ààqns && ‚Ñï(-5)‚àâqns
    @test dimension(qns)==19 && dimension(qns, 1)==dimension(qns, ‚Ñï(-1))==4 && dimension(qns, 2)==dimension(qns, ‚Ñï(-2))==12 && dimension(qns, 3)==dimension(qns, ‚Ñï(-3))==1 && dimension(qns, 4)==dimension(qns, ‚Ñï(-4))==2
    @test range(qns, 1)==range(qns, ‚Ñï(-1))==1:4 && range(qns, 2)==range(qns, ‚Ñï(-2))==5:16 && range(qns, 3)==range(qns, ‚Ñï(-3))==17:17 && range(qns, 4)==range(qns, ‚Ñï(-4))==18:19
    @test cumsum(qns, 0)==0 && cumsum(qns, 1)==cumsum(qns, ‚Ñï(-1))==4 && cumsum(qns, 2)==cumsum(qns, ‚Ñï(-2))==16 && cumsum(qns, 3)==cumsum(qns, ‚Ñï(-3))==17 && cumsum(qns, 4)==cumsum(qns, ‚Ñï(-4))==19
    @test collect(pairs(qns, dimension))==[‚Ñï(-1)=>4, ‚Ñï(-2)=>12, ‚Ñï(-3)=>1, ‚Ñï(-4)=>2] && collect(pairs(qns, range))==[‚Ñï(-1)=>1:4, ‚Ñï(-2)=>5:16, ‚Ñï(-3)=>17:17, ‚Ñï(-4)=>18:19]
    @test [findindex(i, qns, guess) for (i, guess) in zip(1:dimension(qns), [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4])] == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4]
end

@testset "AbelianGradedSpaceSum" begin
    qns‚ÇÅ, qns‚ÇÇ, qns‚ÇÉ = Graded{‚Ñï}(1=>2, 2=>4, 4=>1), Graded{‚Ñï}(1=>1, 2=>4, 3=>1), Graded{‚Ñï}(1=>1, 2=>4, 4=>1)
    qns = AbelianGradedSpaceSum(qns‚ÇÅ, qns‚ÇÇ, qns‚ÇÉ)
    @test string(qns) == "Graded{‚Ñï}(1=>2, 2=>4, 4=>1) ‚äï Graded{‚Ñï}(1=>1, 2=>4, 3=>1) ‚äï Graded{‚Ñï}(1=>1, 2=>4, 4=>1)"
    @test rank(qns) == rank(typeof(qns)) == 3
    @test qns == qns‚ÇÅ ‚äï qns‚ÇÇ ‚äï qns‚ÇÉ == (qns‚ÇÅ ‚äï qns‚ÇÇ) ‚äï qns‚ÇÉ == qns‚ÇÅ ‚äï (qns‚ÇÇ ‚äï qns‚ÇÉ) == (qns‚ÇÅ ‚äï qns‚ÇÇ) ‚äï AbelianGradedSpaceSum(qns‚ÇÉ)
    @test dimension(qns) == 19
    @test [dimension(qns, i) for i = 1:length(qns)] == [2, 4, 1, 1, 4, 1, 1, 4, 1]
    @test [range(qns, i) for i = 1:length(qns)] == [1:2, 3:6, 7:7, 8:8, 9:12, 13:13, 14:14, 15:18, 19:19]
    @test collect(pairs(qns, dimension)) == [‚Ñï(1)=>2, ‚Ñï(2)=>4, ‚Ñï(4)=>1, ‚Ñï(1)=>1, ‚Ñï(2)=>4, ‚Ñï(3)=>1, ‚Ñï(1)=>1, ‚Ñï(2)=>4, ‚Ñï(4)=>1]
    @test collect(pairs(qns, range)) == [‚Ñï(1)=>1:2, ‚Ñï(2)=>3:6, ‚Ñï(4)=>7:7, ‚Ñï(1)=>8:8, ‚Ñï(2)=>9:12, ‚Ñï(3)=>13:13, ‚Ñï(1)=>14:14, ‚Ñï(2)=>15:18, ‚Ñï(4)=>19:19]
    @test decompose(qns; expand=false) == (Graded{‚Ñï}(1=>4, 2=>12, 3=>1, 4=>2), [1, 4, 7, 2, 5, 8, 6, 3, 9])
    @test decompose(qns; expand=true) == (Graded{‚Ñï}(1=>4, 2=>12, 3=>1, 4=>2), [1, 2, 8, 14, 3, 4, 5, 6, 9, 10, 11, 12, 15, 16, 17, 18, 13, 7, 19])
end

@testset "AbelianGradedSpaceProd" begin
    qns‚ÇÅ, qns‚ÇÇ, qns‚ÇÉ = Graded{ùïä·∂ª}(-1/2=>1, 1/2=>2), Graded{ùïä·∂ª}(-1/2=>2, 1/2=>1), Graded{ùïä·∂ª}(-1/2=>2, 1/2=>2)
    qns = AbelianGradedSpaceProd(qns‚ÇÅ, qns‚ÇÇ, qns‚ÇÉ)
    @test string(qns) == "Graded{ùïä·∂ª}(-1/2=>1, 1/2=>2) ‚äó Graded{ùïä·∂ª}(-1/2=>2, 1/2=>1) ‚äó Graded{ùïä·∂ª}(-1/2=>2, 1/2=>2)"
    @test rank(qns) == rank(typeof(qns)) == 3
    @test qns == qns‚ÇÅ ‚äó qns‚ÇÇ ‚äó qns‚ÇÉ == (qns‚ÇÅ ‚äó qns‚ÇÇ) ‚äó qns‚ÇÉ == qns‚ÇÅ ‚äó (qns‚ÇÇ ‚äó qns‚ÇÉ) == (qns‚ÇÅ ‚äó qns‚ÇÇ) ‚äó AbelianGradedSpaceProd(qns‚ÇÉ)
    @test dimension(qns) == 36
    @test [dimension(qns, i) for i = 1:length(qns)] == [4, 4, 2, 2, 8, 8, 4, 4]
    @test [dimension(qns, i) for i in reverse.(reshape(collect(product(qns‚ÇÉ, qns‚ÇÇ, qns‚ÇÅ)), :))] == [4, 4, 2, 2, 8, 8, 4, 4]
    @test [range(qns, i) for i = 1:length(qns)] == [
        [1, 2, 5, 6], [3, 4, 7, 8], [9, 10], [11, 12], [13, 14, 17, 18, 25, 26, 29, 30], [15, 16, 19, 20, 27, 28, 31, 32], [21, 22, 33, 34], [23, 24, 35, 36]
    ]
    @test [range(qns, i) for i in reverse.(reshape(collect(product(qns‚ÇÉ, qns‚ÇÇ, qns‚ÇÅ)), :))] == [
        [1, 2, 5, 6], [3, 4, 7, 8], [9, 10], [11, 12], [13, 14, 17, 18, 25, 26, 29, 30], [15, 16, 19, 20, 27, 28, 31, 32], [21, 22, 33, 34], [23, 24, 35, 36]
    ]
    @test collect(pairs(qns, dimension)) == [ùïä·∂ª(-3/2) => 4, ùïä·∂ª(-1/2) => 4, ùïä·∂ª(-1/2) => 2, ùïä·∂ª(1/2) => 2, ùïä·∂ª(-1/2) => 8, ùïä·∂ª(1/2) => 8, ùïä·∂ª(1/2) => 4, ùïä·∂ª(3/2) => 4]
    @test collect(pairs(qns, range)) == [
        ùïä·∂ª(-3/2) => [1, 2, 5, 6],
        ùïä·∂ª(-1/2) => [3, 4, 7, 8],
        ùïä·∂ª(-1/2) => [9, 10],
        ùïä·∂ª(1/2) => [11, 12],
        ùïä·∂ª(-1/2) => [13, 14, 17, 18, 25, 26, 29, 30],
        ùïä·∂ª(1/2) => [15, 16, 19, 20, 27, 28, 31, 32],
        ùïä·∂ª(1/2) => [21, 22, 33, 34],
        ùïä·∂ª(3/2) => [23, 24, 35, 36]
    ]
    @test decompose(qns; expand=false) == (Graded{ùïä·∂ª}(-3/2=>4, -1/2=>14, 1/2=>14, 3/2=>4), [1, 2, 3, 5, 4, 6, 7, 8])
    @test decompose(qns; expand=true) == (Graded{ùïä·∂ª}(-3/2=>4, -1/2=>14, 1/2=>14, 3/2=>4), [1, 2, 5, 6, 3, 4, 7, 8, 9, 10, 13, 14, 17, 18, 25, 26, 29, 30, 11, 12, 15, 16, 19, 20, 27, 28, 31, 32, 21, 22, 33, 34, 23, 24, 35, 36])
    @test merge(qns) == (
        Graded{ùïä·∂ª}(-3/2=>4, -1/2=>14, 1/2=>14, 3/2=>4), 
        Dict(
            ùïä·∂ª(-3/2) => [(ùïä·∂ª(-1/2), ùïä·∂ª(-1/2), ùïä·∂ª(-1/2))],
            ùïä·∂ª(-1/2) => [(ùïä·∂ª(-1/2), ùïä·∂ª(-1/2), ùïä·∂ª(1/2)), (ùïä·∂ª(-1/2), ùïä·∂ª(1/2), ùïä·∂ª(-1/2)), (ùïä·∂ª(1/2), ùïä·∂ª(-1/2), ùïä·∂ª(-1/2))],
            ùïä·∂ª(1/2) => [(ùïä·∂ª(-1/2), ùïä·∂ª(1/2), ùïä·∂ª(1/2)), (ùïä·∂ª(1/2), ùïä·∂ª(-1/2), ùïä·∂ª(1/2)), (ùïä·∂ª(1/2), ùïä·∂ª(1/2), ùïä·∂ª(-1/2))],
            ùïä·∂ª(3/2) => [(ùïä·∂ª(1/2), ùïä·∂ª(1/2), ùïä·∂ª(1/2))]
            )
    )
    @test split(ùïä·∂ª(-3/2), qns; nmax=20) ‚äÜ split(ùïä·∂ª(-3/2), qns; nmax=Inf) == Set([(ùïä·∂ª(-1/2), ùïä·∂ª(-1/2), ùïä·∂ª(-1/2))])
    @test split(ùïä·∂ª(-1/2), qns; nmax=20) ‚äÜ split(ùïä·∂ª(-1/2), qns; nmax=Inf) == Set([(ùïä·∂ª(1/2), ùïä·∂ª(-1/2), ùïä·∂ª(-1/2)), (ùïä·∂ª(-1/2), ùïä·∂ª(-1/2), ùïä·∂ª(1/2)), (ùïä·∂ª(-1/2), ùïä·∂ª(1/2), ùïä·∂ª(-1/2))])
    @test split(ùïä·∂ª(1/2), qns; nmax=20) ‚äÜ split(ùïä·∂ª(1/2), qns; nmax=Inf) == Set([(ùïä·∂ª(-1/2), ùïä·∂ª(1/2), ùïä·∂ª(1/2)), (ùïä·∂ª(1/2), ùïä·∂ª(-1/2), ùïä·∂ª(1/2)), (ùïä·∂ª(1/2), ùïä·∂ª(1/2), ùïä·∂ª(-1/2))])
    @test split(ùïä·∂ª(3/2), qns; nmax=20) ‚äÜ split(ùïä·∂ª(3/2), qns; nmax=Inf) == Set([(ùïä·∂ª(1/2), ùïä·∂ª(1/2), ùïä·∂ª(1/2))])
end
